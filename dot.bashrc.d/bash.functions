# Bash Functions
# File & strings related functions:
# Find a file with a pattern in name
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }


# Process/system related functions:
function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

# Pretty-print of 'df' output
function ppdf() {
    command df $* | awk '
    BEGIN {
        # Only works in gawk
        PROCINFO["sorted_in"] = "@ind_str_asc"
        mnt_sz = length("Mount")
        cap_sz = length("Capacity")
    }
    NR==1 {
        for(i = 1; i <= NF; i++) {
            if($i == "Capacity") { cap = i }
            if($i == "Mounted") { mount = i }
        }
    }
    NR>1 {
        if($1 == "map") {
            marr[$NF] = $2
            if(length($NF) > mnt_sz) { mnt_sz = length($NF) }
        }
        else {
            carr[$mount] = $cap
            if(length($mount) > mnt_sz) { mnt_sz = length($mount) }
        }
    }
    END {
        print sprintf("%-*s", mnt_sz, "Mount"), "Capacity"
        for(x in carr) {
            printf("%-*s %4s\n", mnt_sz, x, carr[x])
        }
        for(y in marr) {
            printf("%-*s is map %s\n", mnt_sz, y, marr[y])
        }
    }'
}
# Get IP adress on ethernet.
function my_ip() {
    local MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' | sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}
# Get current host related info.
function ii() {
    echo -e "\nYou are logged on ${BRed}$HOSTNAME"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs | cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date +%F_%T
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; ppdf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; netstat -pan --inet;
    echo
}
# See 'killps' for example of use.
function ask() {
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        (y*|Y*) return 0 ;;
        (*) return 1 ;;
    esac
}
# My own creation
function compare_across_machines() {
    # You can also use it like:
    # M_ONE=foo.thing.com M_TWO=bar.thing.com compare_across_machines 'cat some_file_name.txt'
    # if you want to change the STMT frequently instead of the pairs of machines
    [ -z "$STMT" ]  && local -r STMT="$1"
    [ -z "$M_ONE" ] && local -r M_ONE="$2"
    [ -z "$M_TWO" ] && local -r M_TWO="$3"
    diff -y <( ssh -nXY $M_ONE "$STMT" ) <( ssh -nXY $M_TWO "$STMT" )
}
